; (define null?
;   (lambda (x)
;     (eq? x Q())))

(null? Qa)
(null? Q())

; (define not
;   (lambda (x)
;     (if x #false #true)))

(not #true)
(not #false)

(not (eq? Qa Qa))
(not (eq? Qa Qb))

; (define and
;   (lambda (x y)
;     (if x (if y #true #false) #false)))

(and (not (pair? Qa)) (eq? Qa Qa))
(and (not (pair? Qa)) (eq? Qa Qb))

; (define append
;   (lambda (x y)
;     (if (null? x) y P Hx (append Tx y))))

(append Q(a b) Q(c d))
(append Q()    Q(c d))

; (define list
;   (lambda (x y)
;     P x P y Q()))

(define zip
  (lambda (x y)
    (if (and (null? x) (null? y))
       Q()
        (if (and (pair? x) (pair? y))
            P (list Hx Hy) (zip  Tx Ty)
           Q()))))

(zip Q(x y z) Q(a b c)); => ((x a) (y b) (z c))

(define assoc
  (lambda (x y)
    (if (null? x) Q()
        (if (null? y) x
            (if (eq? HHy x) HTHy
                (assoc x Ty))))))

(assoc Qx Q(        (x a) (y b))); => a
(assoc Qx Q((x new) (x a) (y b))); => new

(define evcon
  (lambda (c a)
    (if (eval HHc a)
        (eval HTHc a)
        (evcon Tc a))))

(define evlis
  (lambda (m a)
    (if (null? m) Q()
        P (eval  Hm a) (evlis Tm a))))

(define eval
  (lambda (e a)
    (if (not (pair? e)) (assoc e a)
        (if (not (pair? He))
            (if (eq? He Qquote) HTe
                (if (eq? He Qatom) (not (pair? (eval HTe a)))
                    (if (eq? He Qeq) (eq? (eval HTe a) (eval HTTe a))
                        (if (eq? He Qcar) H (eval HTe a)
                            (if (eq? He Qcdr) T (eval HTe a)
                                (if (eq? He Qcons) P (eval HTe a) (eval HTTe a)
                                    (if (eq? He Qcond) (evcon Te a)
                                        (eval P (assoc He a) Te a))))))))
            (if (eq? HHe Qlabel) (eval P HTTHe Te P (list HTHe He) a)
                (if (eq? HHe Qlambda) (eval HTTHe (append (zip HTHe (evlis Te a)) a))
                    Qerror))))))

(eval '(quote a) '())
(eval ''a '())
(eval '(quote (a b c)) '())

(eval '(atom 'a) '())
(eval '(atom (quote (a b c))) '())
(eval '(atom '()) '())
(eval '(atom (atom 'a)) '())
(eval '(atom (quote (atom 'a))) '())

(eval '(eq 'a 'a) '())
(eval '(eq 'a 'b) '())
(eval '(eq '() '()) '())

(eval '(car '(a b c)) '())
(eval '(cdr '(a b c)) '())

(eval '(cons 'a '(b c)) '())
(eval '(cons 'a (cons 'b (cons 'c '()))) '())
(eval '(car (cons 'a '(b c))) '())
(eval '(cdr (cons 'a '(b c))) '())

(eval '(cond ((eq 'a 'b) 'first) ((atom 'a) 'second)) '())

(eval '((lambda (x) (cons x '(b))) 'a) '())
(eval '((lambda (x y) (cons x (cdr y))) 'z '(a b c)) '())
(eval '((lambda (f) (f '(b c))) '(lambda (x) (cons 'a x))) '())

(eval '((label subst (lambda (x y z)
                       (cond ((atom z)
                              (cond ((eq z y) x) (#true z)))
                             (#true
                              (cons (subst x y (car z))
                                    (subst x y (cdr z)))))
                       ))
        'm 'b '(a b (a b c) d))
      '())

